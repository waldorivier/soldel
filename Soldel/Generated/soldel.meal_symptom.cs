//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate template.
// Code is generated on: 16.05.2020 16:51:11
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using mupeModel.Utils;

namespace mupeModel
{

    /// <summary>
    /// There are no comments for meal_symptom, Soldel in the schema.
    /// </summary>
    public partial class meal_symptom : i_soldel, INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _meal_id;

        private long _symptom_id;

        private meal _meal;


        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj) {
            meal_symptom toCompare = obj as meal_symptom;
            if (toCompare == null) {
                return false;
            }

            if (!Object.Equals(this.meal_id, toCompare.meal_id))
                return false;
            if (!Object.Equals(this.symptom_id, toCompare.symptom_id))
                return false;

            return true;
        }

        public override int GetHashCode() {
            int hashCode = 13;
            hashCode = (hashCode * 7) + meal_id.GetHashCode();
            hashCode = (hashCode * 7) + symptom_id.GetHashCode();
            return hashCode;
        }
        /// <summary>
        /// There are no comments for Onmeal_idChanging in the schema.
        /// </summary>
        partial void Onmeal_idChanging(long value);

        /// <summary>
        /// There are no comments for Onmeal_idChanged in the schema.
        /// </summary>
        partial void Onmeal_idChanged();
        /// <summary>
        /// There are no comments for Onsymptom_idChanging in the schema.
        /// </summary>
        partial void Onsymptom_idChanging(long value);

        /// <summary>
        /// There are no comments for Onsymptom_idChanged in the schema.
        /// </summary>
        partial void Onsymptom_idChanged();
        /// <summary>
        /// There are no comments for OnmealChanging in the schema.
        /// </summary>
        partial void OnmealChanging(meal value);

        /// <summary>
        /// There are no comments for OnmealChanged in the schema.
        /// </summary>
        partial void OnmealChanged();
        /// <summary>
        /// There are no comments for OnsymptomChanging in the schema.
        /// </summary>
        partial void OnsymptomChanging(symptom value);

        /// <summary>
        /// There are no comments for OnsymptomChanged in the schema.
        /// </summary>
        partial void OnsymptomChanged();

        #endregion
        /// <summary>
        /// There are no comments for meal_symptom constructor in the schema.
        /// </summary>
        public meal_symptom() {
            OnCreated();
        }

        public meal_symptom(meal meal, symptom symptom) {
            this.meal = meal;
            this.symptom = symptom;

            this.meal_id = meal.meal_id;
            this.symptom_id = symptom.symptom_id;

            this._symptom = symptom;
            this._symptom_id = symptom.symptom_id;

            OnCreated();
        }

        /// <summary>
        /// There are no comments for meal_id in the schema.
        /// </summary>
        public virtual long meal_id {
            get {
                return this._meal_id;
            }
            set {
                if (this._meal_id != value) {
                    this.Onmeal_idChanging(value);
                    this.SendPropertyChanging();
                    this._meal_id = value;
                    this.SendPropertyChanged("meal_id");
                    this.Onmeal_idChanged();
                }
            }
        }


        /// <summary>
        /// There are no comments for symptom_id in the schema.
        /// </summary>
        public virtual long symptom_id {
            get {
                return this._symptom_id;
            }
            set {
                if (this._symptom_id != value) {
                    this.Onsymptom_idChanging(value);
                    this.SendPropertyChanging();
                    this._symptom_id = value;
                    this.SendPropertyChanged("symptom_id");
                    this.Onsymptom_idChanged();
                }
            }
        }


        /// <summary>
        /// There are no comments for meal in the schema.
        /// </summary>
        public virtual meal meal {
            get {
                return this._meal;
            }
            set {
                if (this._meal != value) {
                    this.OnmealChanging(value);
                    this.SendPropertyChanging();
                    this._meal = value;
                    this.SendPropertyChanged("meal");
                    this.OnmealChanged();
                }
            }
        }


        /// <summary>
        /// There are no comments for symptom in the schema.
        /// </summary>
        public virtual symptom symptom {
            get {
                return this._symptom;
            }
            set {
                if (this._symptom != value) {
                    this.OnsymptomChanging(value);
                    this.SendPropertyChanging();
                    this._symptom = value;
                    this.SendPropertyChanged("symptom");
                    this.OnsymptomChanged();
                }
            }
        }

        public virtual symptom _symptom {
            get;
            set;
        }

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #region I_SOLDEL

        public virtual void add_child(object child) {
            throw new NotImplementedException();
        }

        public virtual bool can_add_child(object child) {
            throw new NotImplementedException();
        }

        public virtual bool can_remove_me() {
            return true;
        }

        public virtual void remove_me() {
            meal.l_meal_symptom.Remove(this);
            symptom.l_meal_symptom.Remove(this);
        }

        public virtual bool is_persistant() {
            throw new NotImplementedException();
        }

        public virtual i_soldel copy() {
            var copy = new meal_symptom();
            copy_object.copy<meal_symptom>(this, copy);
            return copy;
        }

        public virtual bool can_update() {
            return _symptom != null & _symptom != symptom
                ;
        }

        public virtual void update() {
        }

        #endregion
    }

}
